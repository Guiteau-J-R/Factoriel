EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
factorial.com -- emu8086 assembler version: 4.08  
 
[ 10/25/2020  --  11:38:57 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;Faculte des Sciences de l'Universite d'Etat d'Haiti
[   2]        :                                       ;Devoir d'assembleur
[   3]        :                                       ;Sujet: Factoriel
[   4]        :                                       ;Professeur: M. Gary Antoine
[   5]        :                                       ;Preparer par: Sylvain P. Dieury
[   6]        :                                       ;Date: 16 Octobre 2020
[   7]        :                                       
[   8]        :                                       
[   9]        :                                       ; this macro prints a char in AL and advances
[  10]        :                                       ; the current cursor position:
[  11]        :                                       putc    macro   char
[  12]        :                                       push    ax
[  13]        :                                       mov     al, char
[  14]        :                                       mov     ah, 0eh
[  15]        :                                       int     10h
[  16]        :                                       pop     ax
[  17]        :                                       endm
[  18]        :                                       
[  19]        :                                       
[  20]        :                                       
[  21]        :                                       org     100h
[  22]        :                                       
[  23]    0100: EB 02                                 jmp start
[  24]        :                                       
[  25]        :                                       
[  26]    0102: 00 00                                 result dw ?
[  27]        :                                       
[  28]        :                                       
[  29]        :                                       
[  30]    0104:                                       start:
[  31]        :                                       
[  32]        :                                       ; get first number:
[  33]        :                                       
[  34]    0104: BA 0D 01                              mov dx, offset msg1
[  35]    0107: B4 09                                 mov ah, 9
[  36]    0109: CD 21                                 int 21h
[  37]    010B: EB 15                                 jmp n1
[  38]    010D: 0D 0A 65 6E 74 65 72 20 74 68 65 20   msg1 db 0Dh,0Ah, 'enter the number: $'
                6E 75 6D 62 65 72 3A 20 24          
[  39]    0122:                                       n1:
[  40]        :                                       
[  41]    0122: E8 7F 00                              call    scan_num
[  42]        :                                       
[  43]        :                                       
[  44]        :                                       ; factorial of 0 = 1:
[  45]    0125: B8 01 00                              mov     ax, 1
[  46]    0128: 83 F9 00                              cmp     cx, 0
[  47]    012B: 74 15                                 je      print_result
[  48]        :                                       
[  49]        :                                       ; move the number to bx:
[  50]        :                                       ; cx will be a counter:
[  51]        :                                       
[  52]    012D: 8B D9                                 mov     bx, cx
[  53]        :                                       
[  54]    012F: B8 01 00                              mov     ax, 1
[  55]    0132: BB 01 00                              mov     bx, 1
[  56]        :                                       
[  57]    0135:                                       calc_it:
[  58]    0135: F7 E3                                 mul     bx
[  59]    0137: 83 FA 00                              cmp     dx, 0
[  60]    013A: 75 25                                 jne     overflow
[  61]    013C: 43                                    inc     bx
[  62]    013D: E2 F6                                 loop    calc_it
[  63]        :                                       
[  64]    013F: A3 02 01                              mov result, ax
[  65]        :                                       
[  66]        :                                       
[  67]    0142:                                       print_result:
[  68]        :                                       
[  69]        :                                       ; print result in ax:
[  70]    0142: BA 4B 01                              mov dx, offset msg2
[  71]    0145: B4 09                                 mov ah, 9
[  72]    0147: CD 21                                 int 21h
[  73]    0149: EB 0E                                 jmp n2
[  74]    014B: 0D 0A 66 61 63 74 6F 72 69 61 6C 3A   msg2 db 0Dh,0Ah, 'factorial: $'
                20 24                               
[  75]    0159:                                       n2:
[  76]        :                                       
[  77]        :                                       
[  78]    0159: A1 02 01                              mov     ax, result
[  79]    015C: E8 2C 01                              call    print_num_uns
[  80]    015F: EB 3E                                 jmp     exit
[  81]        :                                       
[  82]        :                                       
[  83]    0161:                                       overflow:
[  84]    0161: BA 6A 01                              mov dx, offset msg3
[  85]    0164: B4 09                                 mov ah, 9
[  86]    0166: CD 21                                 int 21h
[  87]    0168: EB 32                                 jmp n3
[  88]    016A: 0D 0A 74 68 65 20 72 65 73 75 6C 74   msg3 db 0Dh,0Ah, 'the result is too big!', 0Dh,0Ah, 'use values from 0 to 8.$'
                20 69 73 20 74 6F 6F 20 62 69 67 21 
                0D 0A 75 73 65 20 76 61 6C 75 65 73 
                20 66 72 6F 6D 20 30 20 74 6F 20 38 
                2E 24                               
[  89]    019C:                                       n3:
[  90]    019C: E9 65 FF                              jmp     start
[  91]        :                                       
[  92]    019F:                                       exit:
[  93]        :                                       
[  94]        :                                       ; wait for any key press:
[  95]    019F: B4 00                                 mov ah, 0
[  96]    01A1: CD 16                                 int 16h
[  97]        :                                       
[  98]    01A3: C3                                    ret
[  99]        :                                       
[ 100]        :                                       
[ 101]        :                                       
[ 102]        :                                       
[ 103]        :                                       
[ 104]        :                                       
[ 105]        :                                       
[ 106]        :                                       
[ 107]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 108]        :                                       ;;; these functions are copied from emu8086.inc ;;;
[ 109]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 110]        :                                       
[ 111]        :                                       
[ 112]        :                                       ; gets the multi-digit SIGNED number from the keyboard,
[ 113]        :                                       ; and stores the result in CX register:
[ 114]    01A4:                                       SCAN_NUM        PROC    NEAR
[ 115]    01A4: 52                                    PUSH    DX
[ 116]    01A5: 50                                    PUSH    AX
[ 117]    01A6: 56                                    PUSH    SI
[ 118]        :                                       
[ 119]    01A7: B9 00 00                              MOV     CX, 0
[ 120]        :                                       
[ 121]        :                                       ; reset flag:
[ 122]    01AA: 2E C6 06 64 02 00                     MOV     CS:make_minus, 0
[ 123]        :                                       
[ 124]    01B0:                                       next_digit:
[ 125]        :                                       
[ 126]        :                                       ; get char from keyboard
[ 127]        :                                       ; into AL:
[ 128]    01B0: B4 00                                 MOV     AH, 00h
[ 129]    01B2: CD 16                                 INT     16h
[ 130]        :                                       ; and print it:
[ 131]    01B4: B4 0E                                 MOV     AH, 0Eh
[ 132]    01B6: CD 10                                 INT     10h
[ 133]        :                                       
[ 134]        :                                       ; check for MINUS:
[ 135]    01B8: 3C 2D                                 CMP     AL, '-'
[ 136]    01BA: 74 69                                 JE      set_minus
[ 137]        :                                       
[ 138]        :                                       ; check for ENTER key:
[ 139]    01BC: 3C 0D                                 CMP     AL, 0Dh  ; carriage return?
[ 140]    01BE: 75 03                                 JNE     not_cr
[ 141]    01C0: E9 93 00                              JMP     stop_input
[ 142]    01C3:                                       not_cr:
[ 143]        :                                       
[ 144]        :                                       
[ 145]    01C3: 3C 08                                 CMP     AL, 8                   ; 'BACKSPACE' pressed?
[ 146]    01C5: 75 1E                                 JNE     backspace_checked
[ 147]    01C7: BA 00 00                              MOV     DX, 0                   ; remove last digit by
[ 148]    01CA: 8B C1                                 MOV     AX, CX                  ; division:
[ 149]    01CC: 2E F7 36 D9 02                        DIV     CS:ten                  ; AX = DX:AX / 10 (DX-rem).
[ 150]    01D1: 8B C8                                 MOV     CX, AX
[ 151]    01D3: 50 B0 20 B4 0E CD 10 58               PUTC    ' '                     ; clear position.
[ 152]    01DB: 50 B0 08 B4 0E CD 10 58               PUTC    8                       ; backspace again.
[ 153]    01E3: EB CB                                 JMP     next_digit
[ 154]    01E5:                                       backspace_checked:
[ 155]        :                                       
[ 156]        :                                       
[ 157]        :                                       ; allow only digits:
[ 158]    01E5: 3C 30                                 CMP     AL, '0'
[ 159]    01E7: 73 02                                 JAE     ok_AE_0
[ 160]    01E9: EB 04                                 JMP     remove_not_digit
[ 161]    01EB:                                       ok_AE_0:
[ 162]    01EB: 3C 39                                 CMP     AL, '9'
[ 163]    01ED: 76 1A                                 JBE     ok_digit
[ 164]    01EF:                                       remove_not_digit:
[ 165]    01EF: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace.
[ 166]    01F7: 50 B0 20 B4 0E CD 10 58               PUTC    ' '     ; clear last entered not digit.
[ 167]    01FF: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace again.
[ 168]    0207: EB A7                                 JMP     next_digit ; wait for next input.
[ 169]    0209:                                       ok_digit:
[ 170]        :                                       
[ 171]        :                                       
[ 172]        :                                       ; multiply CX by 10 (first time the result is zero)
[ 173]    0209: 50                                    PUSH    AX
[ 174]    020A: 8B C1                                 MOV     AX, CX
[ 175]    020C: 2E F7 26 D9 02                        MUL     CS:ten                  ; DX:AX = AX*10
[ 176]    0211: 8B C8                                 MOV     CX, AX
[ 177]    0213: 58                                    POP     AX
[ 178]        :                                       
[ 179]        :                                       ; check if the number is too big
[ 180]        :                                       ; (result should be 16 bits)
[ 181]    0214: 83 FA 00                              CMP     DX, 0
[ 182]    0217: 75 19                                 JNE     too_big
[ 183]        :                                       
[ 184]        :                                       ; convert from ASCII code:
[ 185]    0219: 2C 30                                 SUB     AL, 30h
[ 186]        :                                       
[ 187]        :                                       ; add AL to CX:
[ 188]    021B: B4 00                                 MOV     AH, 0
[ 189]    021D: 8B D1                                 MOV     DX, CX      ; backup, in case the result will be too big.
[ 190]    021F: 03 C8                                 ADD     CX, AX
[ 191]    0221: 72 0A                                 JC      too_big2    ; jump if the number is too big.
[ 192]        :                                       
[ 193]    0223: EB 8B                                 JMP     next_digit
[ 194]        :                                       
[ 195]    0225:                                       set_minus:
[ 196]    0225: 2E C6 06 64 02 01                     MOV     CS:make_minus, 1
[ 197]    022B: EB 83                                 JMP     next_digit
[ 198]        :                                       
[ 199]    022D:                                       too_big2:
[ 200]    022D: 8B CA                                 MOV     CX, DX      ; restore the backuped value before add.
[ 201]    022F: BA 00 00                              MOV     DX, 0       ; DX was zero before backup!
[ 202]    0232:                                       too_big:
[ 203]    0232: 8B C1                                 MOV     AX, CX
[ 204]    0234: 2E F7 36 D9 02                        DIV     CS:ten  ; reverse last DX:AX = AX*10, make AX = DX:AX / 10
[ 205]    0239: 8B C8                                 MOV     CX, AX
[ 206]    023B: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace.
[ 207]    0243: 50 B0 20 B4 0E CD 10 58               PUTC    ' '     ; clear last entered digit.
[ 208]    024B: 50 B0 08 B4 0E CD 10 58               PUTC    8       ; backspace again.
[ 209]    0253: E9 5A FF                              JMP     next_digit ; wait for Enter/Backspace.
[ 210]        :                                       
[ 211]        :                                       
[ 212]    0256:                                       stop_input:
[ 213]        :                                       ; check flag:
[ 214]    0256: 2E 80 3E 64 02 00                     CMP     CS:make_minus, 0
[ 215]    025C: 74 02                                 JE      not_minus
[ 216]    025E: F7 D9                                 NEG     CX
[ 217]    0260:                                       not_minus:
[ 218]        :                                       
[ 219]    0260: 5E                                    POP     SI
[ 220]    0261: 58                                    POP     AX
[ 221]    0262: 5A                                    POP     DX
[ 222]    0263: C3                                    RET
[ 223]    0264: 00                                    make_minus      DB      ?       ; used as a flag.
[ 224]        :                                       SCAN_NUM        ENDP
[ 225]        :                                       
[ 226]        :                                       
[ 227]        :                                       
[ 228]        :                                       
[ 229]        :                                       
[ 230]        :                                       ; this procedure prints number in AX,
[ 231]        :                                       ; used with PRINT_NUM_UNS to print signed numbers:
[ 232]    0265:                                       PRINT_NUM       PROC    NEAR
[ 233]    0265: 52                                    PUSH    DX
[ 234]    0266: 50                                    PUSH    AX
[ 235]        :                                       
[ 236]    0267: 3D 00 00                              CMP     AX, 0
[ 237]    026A: 75 0A                                 JNZ     not_zero
[ 238]        :                                       
[ 239]    026C: 50 B0 30 B4 0E CD 10 58               PUTC    '0'
[ 240]    0274: EB 12                                 JMP     printed
[ 241]        :                                       
[ 242]    0276:                                       not_zero:
[ 243]        :                                       ; the check SIGN of AX,
[ 244]        :                                       ; make absolute if it's negative:
[ 245]    0276: 3D 00 00                              CMP     AX, 0
[ 246]    0279: 79 0A                                 JNS     positive
[ 247]    027B: F7 D8                                 NEG     AX
[ 248]        :                                       
[ 249]    027D: 50 B0 2D B4 0E CD 10 58               PUTC    '-'
[ 250]        :                                       
[ 251]    0285:                                       positive:
[ 252]    0285: E8 03 00                              CALL    PRINT_NUM_UNS
[ 253]    0288:                                       printed:
[ 254]    0288: 58                                    POP     AX
[ 255]    0289: 5A                                    POP     DX
[ 256]    028A: C3                                    RET
[ 257]        :                                       PRINT_NUM       ENDP
[ 258]        :                                       
[ 259]        :                                       
[ 260]        :                                       
[ 261]        :                                       ; this procedure prints out an unsigned
[ 262]        :                                       ; number in AX (not just a single digit)
[ 263]        :                                       ; allowed values are from 0 to 65535 (FFFF)
[ 264]    028B:                                       PRINT_NUM_UNS   PROC    NEAR
[ 265]    028B: 50                                    PUSH    AX
[ 266]    028C: 53                                    PUSH    BX
[ 267]    028D: 51                                    PUSH    CX
[ 268]    028E: 52                                    PUSH    DX
[ 269]        :                                       
[ 270]        :                                       ; flag to prevent printing zeros before number:
[ 271]    028F: B9 01 00                              MOV     CX, 1
[ 272]        :                                       
[ 273]        :                                       ; (result of "/ 10000" is always less or equal to 9).
[ 274]    0292: BB 10 27                              MOV     BX, 10000       ; 2710h - divider.
[ 275]        :                                       
[ 276]        :                                       ; AX is zero?
[ 277]    0295: 3D 00 00                              CMP     AX, 0
[ 278]    0298: 74 32                                 JZ      print_zero
[ 279]        :                                       
[ 280]    029A:                                       begin_print:
[ 281]        :                                       
[ 282]        :                                       ; check divider (if zero go to end_print):
[ 283]    029A: 83 FB 00                              CMP     BX,0
[ 284]    029D: 74 35                                 JZ      end_print
[ 285]        :                                       
[ 286]        :                                       ; avoid printing zeros before number:
[ 287]    029F: 83 F9 00                              CMP     CX, 0
[ 288]    02A2: 74 04                                 JE      calc
[ 289]        :                                       ; if AX<BX then result of DIV will be zero:
[ 290]    02A4: 3B C3                                 CMP     AX, BX
[ 291]    02A6: 72 14                                 JB      skip
[ 292]    02A8:                                       calc:
[ 293]    02A8: B9 00 00                              MOV     CX, 0   ; set flag.
[ 294]        :                                       
[ 295]    02AB: BA 00 00                              MOV     DX, 0
[ 296]    02AE: F7 F3                                 DIV     BX      ; AX = DX:AX / BX   (DX=remainder).
[ 297]        :                                       
[ 298]        :                                       ; print last digit
[ 299]        :                                       ; AH is always ZERO, so it's ignored
[ 300]    02B0: 04 30                                 ADD     AL, 30h    ; convert to ASCII code.
[ 301]    02B2: 50 8A C0 B4 0E CD 10 58               PUTC    AL
[ 302]        :                                       
[ 303]        :                                       
[ 304]    02BA: 8B C2                                 MOV     AX, DX  ; get remainder from last div.
[ 305]        :                                       
[ 306]    02BC:                                       skip:
[ 307]        :                                       ; calculate BX=BX/10
[ 308]    02BC: 50                                    PUSH    AX
[ 309]    02BD: BA 00 00                              MOV     DX, 0
[ 310]    02C0: 8B C3                                 MOV     AX, BX
[ 311]    02C2: 2E F7 36 D9 02                        DIV     CS:ten  ; AX = DX:AX / 10   (DX=remainder).
[ 312]    02C7: 8B D8                                 MOV     BX, AX
[ 313]    02C9: 58                                    POP     AX
[ 314]        :                                       
[ 315]    02CA: EB CE                                 JMP     begin_print
[ 316]        :                                       
[ 317]    02CC:                                       print_zero:
[ 318]    02CC: 50 B0 30 B4 0E CD 10 58               PUTC    '0'
[ 319]        :                                       
[ 320]    02D4:                                       end_print:
[ 321]        :                                       
[ 322]    02D4: 5A                                    POP     DX
[ 323]    02D5: 59                                    POP     CX
[ 324]    02D6: 5B                                    POP     BX
[ 325]    02D7: 58                                    POP     AX
[ 326]    02D8: C3                                    RET
[ 327]        :                                       PRINT_NUM_UNS   ENDP
[ 328]        :                                       
[ 329]        :                                       
[ 330]        :                                       
[ 331]    02D9: 0A 00                                 ten             DW      10      ; used as multiplier/divider by SCAN_NUM & PRINT_NUM_UNS.
[ 332]        :                                       
[ 333]        :                                       
[ 334]        :                                       
[ 335]        :                                       
[ 336]        :                                       
[ 337]        :                                       
[ 338]        :                                       
[ 339]        :                                       
[ 340]        :                                       
 
===================================================================================================
 




===================================================================================================
